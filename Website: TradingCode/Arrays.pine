Initialization of arrays
    syntax
        <type>[] <identifier> = <expression>
        var <type>[] <identifier> = <expression>
    Initializations
        a1 = array.new_int(1, 10)
        int[] a2 = array.new_int(1, 10)
        a3 = array.from(10)
        int[] a4 = array.from(10)

        float[] prices = na
        prices = array.new_float(0)
        prices = array.new_float(2, close)
        myArray = array.new_int(size=3, initial_value=0)
        statesArray = array.from(close > open, high != close)
bool[] statesArray = array.from(close > open, high != close)
    array.set(fillColors, 0, color.new(FILL_COLOR, 70))


array.set
array.from

info
.size ?? get size

// Adding items
unshift (add:front)
insert (add:any index)
push (add:back)

// Removing
remove
shift
pop
clear

Array as Stacks: use push & pop
Array as Queue: use push & shift

Arrays manipulations
Concatenation, Copying, Joining, Sorting, Reversing, Slice
.concat(), .copy(), .join(), .sort(), .reverse(), .slice()

Searching array
.includes(), .indexOf(), .lastIndexOf()
? No all indexOf() ?



Statistics

Array statistics functions 
Array average                       array.avg()
Array covariance                    array.covariance()
Array maximum                       array.max()
Array median                        array.median()
Array minimum                       array.min()
Array mode                          array.mode()
Array range                         array.range()
Standardised array                  array.standardize()
Array standard deviation            array.stdev()
Array sum                           array.sum()	
Array variance                      array.variance()

   



//@version=5
indicator("`array.insert()`")
a = array.from(1, 2, 3, 4, 5)
b = array.from(6, 7, 8, 9, 10)
c = array.concat(array.copy(a), b) // Create a new array of combination of a & b without modifying a

if barstate.islast
    label.new(bar_index, 0, "BEFORE\na: " + str.tostring(a), size = size.large, color=color.blue)
    label.new(bar_index, 0, "AFTER\na: " + str.tostring(c), style = label.style_label_up, size = size.large)